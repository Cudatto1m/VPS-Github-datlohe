name: üöÄ VPS Windows with RDP + Ngrok

on:
  workflow_dispatch:   # Ch·∫°y th·ªß c√¥ng t·ª´ tab Actions

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 360   # VPS ch·∫°y t·ªëi ƒëa 6h
    
    env:
      NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    steps:
    - name: üîß Setup Windows RDP
      run: |
        # B·∫≠t Remote Desktop
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "UserAuthentication" -Value 1

        # T·∫°o user m·ªõi
        net user datlohe "Dat@123456" /add
        net localgroup administrators datlohe /add

        Write-Host "‚úÖ User: datlohe / Password: Dat@123456"

    - name: üåç C√†i Ngrok
      run: |
        # T·∫£i v√† c√†i ƒë·∫∑t ngrok
        Invoke-WebRequest -Uri "https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip" -OutFile "ngrok.zip"
        Expand-Archive -Path "ngrok.zip" -DestinationPath "." -Force
        Remove-Item -Path "ngrok.zip" -Force

        # Thi·∫øt l·∫≠p authtoken
        if (-not $Env:NGROK_AUTH_TOKEN) {
            Write-Error "‚ùå NGROK_AUTH_TOKEN ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!"
            exit 1
        }
        
        .\ngrok.exe config add-authtoken $Env:NGROK_AUTH_TOKEN
        
        # Ki·ªÉm tra xem authtoken c√≥ ƒë∆∞·ª£c thi·∫øt l·∫≠p th√†nh c√¥ng kh√¥ng
        if ($LASTEXITCODE -ne 0) {
            Write-Error "‚ùå L·ªói thi·∫øt l·∫≠p authtoken cho ngrok!"
            exit 1
        }

        # Kh·ªüi ch·∫°y ngrok tunnel cho RDP
        $ngrokProcess = Start-Process -FilePath ".\ngrok.exe" -ArgumentList "tcp 3389" -PassThru -NoNewWindow
        
        # Ch·ªù ngrok kh·ªüi ƒë·ªông
        Start-Sleep -Seconds 10
        
        # Th·ª≠ l·∫•y th√¥ng tin tunnel v·ªõi retry
        $maxRetries = 5
        $retryCount = 0
        $tunnelInfo = $null
        
        while ($retryCount -lt $maxRetries -and $null -eq $tunnelInfo) {
            try {
                $tunnelInfo = Invoke-RestMethod -Uri "http://127.0.0.1:4040/api/tunnels" -ErrorAction Stop
                Write-Host "‚úÖ K·∫øt n·ªëi ƒë·∫øn ngrok API th√†nh c√¥ng!"
            } catch {
                Write-Host "‚è≥ ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i... ($($retryCount + 1)/$maxRetries)"
                Start-Sleep -Seconds 5
                $retryCount++
            }
        }
        
        if ($null -eq $tunnelInfo) {
            Write-Error "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn ngrok API sau $maxRetries l·∫ßn th·ª≠"
            exit 1
        }
        
        $publicUrl = $tunnelInfo.tunnels[0].public_url -replace "tcp://", ""
        
        Write-Host "============================"
        Write-Host "‚úÖ K·∫æT N·ªêI VPS QUA RDP:"
        Write-Host "üëâ ƒê·ªãa ch·ªâ: $publicUrl"
        Write-Host "üë§ User: datlohe"
        Write-Host "üîë Password: Dat@123456"
        Write-Host "============================"
        
        # Gi·ªØ ti·∫øn tr√¨nh ch·∫°y
        Write-Host "‚è≥ ƒêang duy tr√¨ k·∫øt n·ªëi..."
        while ($true) {
            Start-Sleep -Seconds 60
        }
